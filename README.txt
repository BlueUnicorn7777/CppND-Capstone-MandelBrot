C++ Capstone Project → MandelBrot Project

Wiki link about the MandelBrot set-

https://en.wikipedia.org/wiki/Mandelbrot_set





Introduction →


This project demonstrates multi-threaded programming using C++. The Mandelbrot set calculations involve heavy commutations. These calculations are carried over a separate Render thread while the UI thread is always responsive to the user commands and doesn’t freeze the screen while the heavy computations are carried over in the background. Also the project ensures graceful terminations of all the treads and closure without throwing any errors.
Included cmake file specifies minimum build requirements. OpenCV library is used to display the Mandelbrot. Some of the code is reused from the 
CPPND: Program a Concurrent Traffic Simulation and the dependency information is a carry over from this project. 

Dependencies for Running Locally

    • cmake >= 2.8 
        ◦ All OSes: click here for installation instructions 
    • make >= 4.1 (Linux, Mac), 3.81 (Windows) 
        ◦ Linux: make is installed by default on most Linux distros 
        ◦ Mac: install Xcode command line tools to get make 
        ◦ Windows: Click here for installation instructions 
    • OpenCV >= 4.1 
        ◦ The OpenCV 4.1.0 source code can be found here 
    • gcc/g++ >= 5.4 
        ◦ Linux: gcc / g++ is installed by default on most Linux distros 
        ◦ Mac: same deal as make - install Xcode command line tools 
        ◦ Windows: recommend using MinGW 


To Build and Run →

Clone the project 
mkdir build
cd build
cmake ..
make
./MandelBrot

To use the MandelBrot set →

The instructions are displayed on the left top of the screen. 

Press h for help.
Press + to zoom in and - to zoom-out. Use arrow keys to scroll.
Use mouse to scroll and zoom. 
Press q to quit.
Press c to hide this help.
Press p to print the image to file.

Use c to hide the help and use h to display the help again. 
p will print the current screen shot to a .jpg file in /data folder.
Use keyboard + and – keys to zoom in and arrow keys to scroll. 
The +,- keys from numeric keypad can not be used , also the zoom and scroll functionality with mouse is not complete. 


Rubric Points Addressed →

Required Rubric Points →


A README with instructions is included with the project.
	
	This README. Please see below for Detailed Project Description.

The submission must compile and run.
	
	Use above instructions in To Build and Run section.


Optional Rubric Points →
	
Loops,Functions,I/O →

The project reads data from a file and process the data, or the program writes data to a file.

The project reads help file from /data folder and creates a transparent cv::mat object to overlay the help info on the Mandelbrot image.

Ref. 

MandelBrot.cpp line no 35

void MandelBrot::createBGImage(bool displayhelp) 


The ‘p’ key on the keyboard will print current image to a .jpg file in /data folder.

Ref.

MandelBrot.cpp line no 86

void MandelBrot::saveImageToFile()


The project accepts user input and processes the input.

The UI function is started in it’s own thread and process the keyboard user input to zoom and scroll the image and various other functions.

MandelBrot.cpp line no 121
void MandelBrot::UI()


Concurrency →


The project uses multithreading.

	Multithreading is used through out this project. The main thread creates the Mandelbrot object. The OpenCV mouse callback functions are handled in the main thread. The MandelBrot constructor will start two other threads , one for the UserInterface and WaitForImage. Please refer below Detailed Project Description.
Also there in another Render thread created which will do the heavy MandelBrot computations in background and queue the generated images to the WaitForImage thread.


A mutex or lock is used in the project.

A condition variable is used in the project.

The above two rubric items are addressed in few of different locations.

There a code reuse of the message queue class created in the Program a Concurrent Traffic Simulation. Ref class MessageQueue defined in the file MessageQueue.h This class uses the _mutex lock and _condition variable on the shared  _queue object.


Also the following treads and function MandelBrot::saveImageToFile()


void MandelBrot::saveImageToFile()
void MandelBrot::UI()

use the shared resource  std::vector<cv::Mat> _images 
and use std::unique_lock<std::mutex> uLock(_mutex) to lock and unlock the resource usage.



Detailed Project Description →

Files 

MessageQueue.h

This file defines a MessageQueue class , which will hold a single object generated by Render thread of cv::mat type and send it over to the UI thread for display. 

MandelBrot.h

The main function will create the object of MandelBrot class. 
The MandelBrot class creates a MessageQueue object , hands over the pointer of the MessageQueue to the Render constructor. 

The MandelBrot  constructor will initialize the private members and start two new threads 

void MandelBrot::UI() to listen to user interaction and calculate new values for the zoom , scroll parameter and send them over to Render class.

void MandelBrot::WaitForImage() to wait on the image created by the Render thread and copy it over to the _images vector for display purpose. 

void MandelBrot::CallBackFunc() this a callback function for the mouse user events for the OpenCV Window. These functions are not implemented.


Render.h

This class defines necessary private and and public members to carry out the MandelBrot image creation. 

The constructor of this class will run the following function to 

void rgbFromWaveLength(double wave, cv::Vec3b &point) to initialize the 
cv::Vec3b colormap[ColormapSize] array to hold different color values which are later used for to get the pixel colors based on the convergence length of the MandelBrot calculations.


This class also holds a pointer to the MessageQueue object 
MessageQueue<cv::Mat> *MQ  passed by the MandelBrot class.


void Render::RenderMandelBrot(double centerX, double centerY, double scaleFactor,
                          cv::Size resultSize)

This public function is used to pass user parameters for Rendering calculations from the MandelBrot object. During the first call it will start the void Render::runforever() function in a separate thread and continuously pass the user parameters to this thread.



void Render::runforever()

This thread will continuously iterate the MandelBrot calculations to create the cv::Mat image objects and pass this image by using move semantics to the message queue. The iterations are done in increasing value of MaxIterations , so that initial iterations are completed quickly in response to user input and more finer image can be generated in the later iterations. Also upon new user input from the 
Render::RenderMandelBrot() function  will set the restart parameter which it will stop the current calculations and restart the new image generation. There is a mutex lock during the period where the shared data is copied in the local variables 

    _mutex.lock();
    cv::Size resultSize = this->resultSize;
    double scaleFactor = this->scaleFactor;
    double centerX = this->centerX;
    double centerY = this->centerY;
    _mutex.unlock();



After calculations are complete this thread will sleep on 
 _condition.wait(uLock) , and can be restarted by void Render::RenderMandelBrot() to restart the calculations or Render::~Render() and void Render::abortRender() to   
abort and return.














